# ==============================================================================
# HELM CHART VALUES - SECURE APPLICATION
# ==============================================================================
# Default values for secure-app.
# This is a YAML-formatted file with security-first configurations.

# Global settings
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  postgresql:
    auth:
      postgresPassword: ""
      database: "secure_app"
  redis:
    auth:
      password: ""

# Application image configuration
image:
  registry: ""
  repository: secure-app
  tag: "latest"
  pullPolicy: Always
  pullSecrets: []

# Application configuration
app:
  name: secure-app
  version: "1.0.0"
  environment: production
  port: 3000
  logLevel: info
  metricsEnabled: true
  healthCheckPath: /health
  readinessPath: /ready
  gracefulShutdownTimeout: 30s

# Deployment configuration
replicaCount: 3
strategy:
  type: RollingUpdate
  rollingUpdate:
    maxUnavailable: 1
    maxSurge: 1

# Resource management
resources:
  limits:
    cpu: 500m
    memory: 512Mi
    ephemeral-storage: 2Gi
  requests:
    cpu: 100m
    memory: 128Mi
    ephemeral-storage: 1Gi

# Auto-scaling configuration
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15

# Vertical Pod Autoscaler
vpa:
  enabled: false
  updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: secure-app
      minAllowed:
        cpu: 50m
        memory: 64Mi
      maxAllowed:
        cpu: 1
        memory: 1Gi

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001
  fsGroupChangePolicy: "OnRootMismatch"
  seccompProfile:
    type: RuntimeDefault
  supplementalGroups: [1001]

containerSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  capabilities:
    drop:
    - ALL
  seccompProfile:
    type: RuntimeDefault

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""
  automountServiceAccountToken: false

# Service configuration
service:
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header X-Frame-Options "SAMEORIGIN" always;
      add_header X-Content-Type-Options "nosniff" always;
      add_header X-XSS-Protection "1; mode=block" always;
      add_header Referrer-Policy "strict-origin-when-cross-origin" always;
      add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self';" always;
  hosts:
    - host: secure-app.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: secure-app-tls
      hosts:
        - secure-app.example.com

# Health checks
livenessProbe:
  httpGet:
    path: /health
    port: http
    scheme: HTTP
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  httpGet:
    path: /ready
    port: http
    scheme: HTTP
  initialDelaySeconds: 5
  periodSeconds: 5
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3

startupProbe:
  httpGet:
    path: /health
    port: http
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 30

# Volume mounts for read-only root filesystem
volumeMounts:
  - name: tmp
    mountPath: /tmp
  - name: var-cache
    mountPath: /var/cache
  - name: var-run
    mountPath: /var/run

volumes:
  - name: tmp
    emptyDir:
      sizeLimit: 100Mi
  - name: var-cache
    emptyDir:
      sizeLimit: 100Mi
  - name: var-run
    emptyDir:
      sizeLimit: 100Mi

# Environment variables
env:
  - name: NODE_ENV
    value: "production"
  - name: PORT
    value: "3000"
  - name: LOG_LEVEL
    value: "info"
  - name: METRICS_ENABLED
    value: "true"

# ConfigMap and Secret references
envFrom:
  - configMapRef:
      name: secure-app-config
  - secretRef:
      name: secure-app-secrets

# Node affinity and scheduling
nodeSelector:
  kubernetes.io/os: linux

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - secure-app
        topologyKey: kubernetes.io/hostname

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 2

# Network policy
networkPolicy:
  enabled: true
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 3000
  egress:
    - to: []
      ports:
      - protocol: UDP
        port: 53
      - protocol: TCP
        port: 53
    - to: []
      ports:
      - protocol: TCP
        port: 443
    - to:
      - namespaceSelector:
          matchLabels:
            name: database
      ports:
      - protocol: TCP
        port: 5432

# Monitoring configuration
monitoring:
  enabled: true
  serviceMonitor:
    enabled: true
    interval: 30s
    path: /metrics
    labels:
      release: prometheus
  prometheus:
    enabled: true
    retention: 15d
  grafana:
    enabled: true
    adminPassword: ""
  alerting:
    enabled: true
    rules:
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.05
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "High error rate detected"

# Security scanning
security:
  podSecurityStandards:
    enforce: "restricted"
    audit: "restricted"
    warn: "restricted"
  
  networkPolicies:
    enabled: true
    defaultDenyAll: true
  
  rbac:
    create: true
    rules:
      - apiGroups: [""]
        resources: ["configmaps"]
        verbs: ["get", "list"]
      - apiGroups: [""]
        resources: ["secrets"]
        verbs: ["get"]

# Backup configuration
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "30d"
  storageClass: "fast-ssd"

# Database configuration
postgresql:
  enabled: false
  auth:
    postgresPassword: ""
    database: "secure_app"
    username: "app_user"
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration
redis:
  enabled: false
  auth:
    enabled: true
    password: ""
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: "fast-ssd"
    resources:
      requests:
        memory: 256Mi
        cpu: 250m
      limits:
        memory: 512Mi
        cpu: 500m
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# External secrets
externalSecrets:
  enabled: false
  secretStore:
    provider: aws
    region: us-east-1
  secrets: []

# Certificate management
certificates:
  enabled: true
  issuer: letsencrypt-prod
  dnsNames:
    - secure-app.example.com

# Compliance and auditing
compliance:
  enabled: true
  frameworks:
    - soc2
    - nist
    - cis
  policies:
    - name: security-baseline
      enforce: true
    - name: network-security
      enforce: true
    - name: rbac-security
      enforce: true

# Performance testing
performanceTesting:
  enabled: false
  load:
    users: 100
    duration: 5m
    rampUp: 1m
  
# Chaos engineering
chaos:
  enabled: false
  experiments:
    - podFailure
    - networkPartition
    - resourceStress

# Development and debugging
development:
  enabled: false
  debug: false
  hotReload: false
  tools:
    enabled: false