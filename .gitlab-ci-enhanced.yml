# ==============================================================================
# üõ°Ô∏è ENHANCED ENTERPRISE DEVSECOPS PIPELINE V2.0
# ==============================================================================
# Production-ready DevSecOps pipeline with advanced features:
# - Parallel execution and matrix builds
# - Advanced caching strategies  
# - Multi-architecture support
# - Progressive deployment with canary releases
# - Comprehensive monitoring and SLO tracking
# - Automated rollback capabilities
# ==============================================================================

# Global variables and configuration
variables:
  # Container Registry
  DOCKER_REGISTRY: "your-registry.com"
  IMAGE_NAME: "${DOCKER_REGISTRY}/secure-app"
  
  # Security Tools - Latest Versions
  TRIVY_VERSION: "0.47.0"
  SNYK_VERSION: "1.1294.0"
  CHECKMARX_VERSION: "latest"
  CONFTEST_VERSION: "0.46.0"
  COSIGN_VERSION: "2.2.0"
  
  # Performance & Caching
  DOCKER_BUILDKIT: "1"
  BUILDKIT_PROGRESS: "plain"
  CACHE_TTL: "7d"
  CACHE_COMPRESSION: "zstd"
  
  # Build Configuration
  PLATFORMS: "linux/amd64,linux/arm64"
  BUILD_ARGS: "--cache-from type=registry --cache-to type=registry,mode=max"
  
  # Kubernetes
  KUBECTL_VERSION: "1.28.0"
  HELM_VERSION: "3.13.0"
  KUSTOMIZE_VERSION: "5.2.1"
  
  # Deployment Strategy
  NAMESPACE: "secure-app"
  CANARY_PERCENTAGE: "10"
  DEPLOYMENT_STRATEGY: "canary"
  ROLLBACK_THRESHOLD: "5%"
  
  # Pipeline Performance
  FAIL_FAST: "true"
  PARALLEL_JOBS: "6"
  MAX_CONCURRENT_BUILDS: "3"
  
  # Security Thresholds
  SECURITY_GATE_CRITICAL: "0"
  SECURITY_GATE_HIGH: "3"
  SECURITY_GATE_MEDIUM: "15"
  SECURITY_GATE_LOW: "50"
  
  # Monitoring & SLO
  SLO_AVAILABILITY: "99.9"
  SLO_LATENCY_P95: "500ms"
  SLO_ERROR_RATE: "0.1%"

# Advanced cache configuration with compression
cache:
  key: 
    files:
      - package-lock.json
      - Dockerfile
      - go.sum
  paths:
    - node_modules/
    - .npm/
    - .yarn/
    - target/
    - .m2/repository/
    - vendor/
    - .gradle/
    - .buildx-cache/
  policy: pull-push
  when: always
  untracked: false

# Include templates for reusability
include:
  - local: '.gitlab/ci/templates/security.yml'
  - local: '.gitlab/ci/templates/deployment.yml'
  - local: '.gitlab/ci/templates/monitoring.yml'

# Global before_script with enhanced setup
before_script:
  - echo "üöÄ Enhanced DevSecOps Pipeline v2.0 - ${CI_PROJECT_NAME}"
  - echo "üìä Build: ${CI_COMMIT_SHORT_SHA} | Branch: ${CI_COMMIT_REF_NAME}"
  - export TIMESTAMP=$(date +%Y%m%d-%H%M%S)
  - export BUILD_TAG="${CI_COMMIT_SHORT_SHA}-${TIMESTAMP}"
  - export IMAGE_FULL_TAG="${IMAGE_NAME}:${BUILD_TAG}"
  - mkdir -p {reports,security-reports,compliance-reports,performance-reports}
  - apk add --no-cache curl wget jq yq git docker-buildx

# Enhanced stage definitions
stages:
  - üîç pre-flight           # Dependency check, cache warm-up
  - üõ°Ô∏è security-parallel    # Parallel security scans
  - üèóÔ∏è build-matrix         # Multi-arch builds
  - üß™ test-parallel        # Parallel test execution
  - üì¶ package-sign         # Package and sign artifacts
  - üîê security-gate        # Security validation gate
  - üöÄ deploy-dev           # Development deployment
  - üîÑ integration-test     # Integration testing
  - üìä performance-test     # Performance & load testing
  - üéØ deploy-staging       # Staging deployment with canary
  - ‚úÖ acceptance-test      # User acceptance testing
  - üåü deploy-production    # Production canary deployment
  - üìà monitor-slo          # SLO monitoring and validation
  - üßπ cleanup-optimize     # Resource cleanup and optimization

# ==============================================================================
# üîç PRE-FLIGHT STAGE
# ==============================================================================

# Pre-flight checks and cache warm-up
pre-flight-check:
  stage: üîç pre-flight
  image: alpine:3.18
  parallel: 2
  script:
    - echo "üîç Pre-flight system check"
    - |
      # Validate required environment variables
      REQUIRED_VARS="DOCKER_REGISTRY CI_REGISTRY_USER CI_REGISTRY_PASSWORD SNYK_TOKEN"
      for var in $REQUIRED_VARS; do
        if [ -z "${!var}" ]; then
          echo "‚ùå Required variable $var is not set"
          exit 1
        fi
      done
    - echo "‚úÖ Environment validation passed"
    - |
      # Check external dependencies
      curl -sSf https://registry-1.docker.io/v2/ > /dev/null || {
        echo "‚ùå Docker Hub unreachable"
        exit 1
      }
    - echo "‚úÖ External dependencies validated"
  cache:
    key: "preflight-${CI_COMMIT_REF_SLUG}"
    paths:
      - .preflight-cache/
  artifacts:
    reports:
      dotenv: preflight.env
    expire_in: 1 hour

# Dependency analysis and caching
dependency-analysis:
  stage: üîç pre-flight
  image: node:18-alpine
  parallel:
    matrix:
      - PACKAGE_MANAGER: [npm, yarn]
      - NODE_VERSION: ["18", "20"]
  cache:
    key: "deps-${PACKAGE_MANAGER}-${NODE_VERSION}-${CI_COMMIT_REF_SLUG}"
    paths:
      - node_modules/
      - .${PACKAGE_MANAGER}/
  script:
    - echo "üì¶ Analyzing dependencies with ${PACKAGE_MANAGER} on Node ${NODE_VERSION}"
    - |
      if [ "$PACKAGE_MANAGER" = "npm" ]; then
        npm ci --cache .npm --prefer-offline
        npm audit --audit-level=moderate --json > reports/npm-audit-${NODE_VERSION}.json || true
      else
        yarn install --frozen-lockfile --cache-folder .yarn
        yarn audit --json > reports/yarn-audit-${NODE_VERSION}.json || true
      fi
    - echo "üìä Dependency tree analysis"
    - npm ls --depth=0 --json > reports/dependency-tree-${NODE_VERSION}.json || true
  artifacts:
    paths:
      - reports/
    expire_in: 7 days
  allow_failure: true

# ==============================================================================
# üõ°Ô∏è PARALLEL SECURITY SCANS
# ==============================================================================

# Enhanced SAST with multiple tools
sast-comprehensive:
  stage: üõ°Ô∏è security-parallel
  parallel:
    matrix:
      - SAST_TOOL: [checkmarx, semgrep, sonarqube, codeql]
  script:
    - echo "üîí Running SAST scan with ${SAST_TOOL}"
    - |
      case $SAST_TOOL in
        checkmarx)
          docker run --rm -v $(pwd):/src checkmarx/cxcli:latest \
            cx scan create --project-name "${CI_PROJECT_NAME}" \
            --source-dir /src --scan-types sast \
            --threshold-sast-high ${SECURITY_GATE_HIGH} \
            --format json --output-path /src/security-reports/checkmarx.json
          ;;
        semgrep)
          docker run --rm -v $(pwd):/src returntocorp/semgrep:latest \
            --config=auto --json --output=/src/security-reports/semgrep.json /src
          ;;
        sonarqube)
          docker run --rm -v $(pwd):/usr/src sonarqube:community \
            sonar-scanner -Dsonar.projectKey=${CI_PROJECT_NAME} \
            -Dsonar.sources=/usr/src -Dsonar.host.url=${SONAR_HOST_URL} \
            -Dsonar.login=${SONAR_TOKEN}
          ;;
        codeql)
          echo "üîç Running CodeQL analysis"
          # CodeQL implementation would go here
          ;;
      esac
  artifacts:
    reports:
      sast: security-reports/${SAST_TOOL}.json
    paths:
      - security-reports/
    expire_in: 30 days
  allow_failure: true

# Enhanced SCA with multiple sources
sca-comprehensive:
  stage: üõ°Ô∏è security-parallel
  parallel:
    matrix:
      - SCA_TOOL: [snyk, whitesource, blackduck, fossa]
  cache:
    key: "sca-${SCA_TOOL}-${CI_COMMIT_REF_SLUG}"
    paths:
      - node_modules/
      - .${SCA_TOOL}/
  script:
    - echo "üì¶ Running SCA scan with ${SCA_TOOL}"
    - |
      case $SCA_TOOL in
        snyk)
          npm ci --cache .npm --prefer-offline
          snyk auth ${SNYK_TOKEN}
          snyk test --severity-threshold=high --json > security-reports/snyk.json || true
          snyk monitor --project-name="${CI_PROJECT_NAME}"
          ;;
        whitesource)
          echo "üîç Running WhiteSource scan"
          # WhiteSource implementation
          ;;
        blackduck)
          echo "üîç Running Black Duck scan"
          # Black Duck implementation
          ;;
        fossa)
          echo "üîç Running FOSSA scan"
          # FOSSA implementation
          ;;
      esac
  artifacts:
    reports:
      dependency_scanning: security-reports/${SCA_TOOL}.json
    paths:
      - security-reports/
    expire_in: 30 days
  allow_failure: true

# Secret scanning with multiple tools
secret-scanning:
  stage: üõ°Ô∏è security-parallel
  parallel:
    matrix:
      - SECRET_TOOL: [truffhog, gitleaks, secretlint]
  script:
    - echo "üîê Scanning for secrets with ${SECRET_TOOL}"
    - |
      case $SECRET_TOOL in
        trufflehog)
          docker run --rm -v $(pwd):/repo trufflesecurity/trufflehog:latest \
            filesystem /repo --json > security-reports/trufflehog.json
          ;;
        gitleaks)
          docker run --rm -v $(pwd):/repo zricethezav/gitleaks:latest \
            detect --source /repo --report-format json \
            --report-path /repo/security-reports/gitleaks.json || true
          ;;
        secretlint)
          npx @secretlint/quick-start "**/*" \
            --format json > security-reports/secretlint.json || true
          ;;
      esac
  artifacts:
    paths:
      - security-reports/
    expire_in: 30 days
  allow_failure: true

# ==============================================================================
# üèóÔ∏è MULTI-ARCHITECTURE BUILD MATRIX
# ==============================================================================

# Enhanced multi-platform build with advanced caching
build-matrix:
  stage: üèóÔ∏è build-matrix
  image: docker:24-dind
  services:
    - docker:24-dind
  parallel:
    matrix:
      - PLATFORM: [linux/amd64, linux/arm64/v8]
      - BUILD_TYPE: [standard, hardened]
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    BUILDX_CACHE_DIR: ".buildx-cache"
    PLATFORM_SAFE: ${PLATFORM//\//-}
  cache:
    key: "build-${PLATFORM_SAFE}-${BUILD_TYPE}-${CI_COMMIT_REF_SLUG}"
    paths:
      - ${BUILDX_CACHE_DIR}
  before_script:
    - docker info
    - docker buildx create --use --name builder-${CI_JOB_ID}
    - docker buildx inspect --bootstrap
  script:
    - echo "üèóÔ∏è Building ${BUILD_TYPE} image for ${PLATFORM}"
    - |
      # Select Dockerfile based on build type
      if [ "$BUILD_TYPE" = "hardened" ]; then
        DOCKERFILE="Dockerfile.hardened"
      else
        DOCKERFILE="Dockerfile"
      fi
    - |
      # Build with advanced caching and security labels
      docker buildx build \
        --platform ${PLATFORM} \
        --file ${DOCKERFILE} \
        --cache-from type=local,src=${BUILDX_CACHE_DIR} \
        --cache-to type=local,dest=${BUILDX_CACHE_DIR}-new,mode=max \
        --cache-from type=registry,ref=${IMAGE_NAME}:cache-${PLATFORM_SAFE} \
        --cache-to type=registry,ref=${IMAGE_NAME}:cache-${PLATFORM_SAFE},mode=max \
        --build-arg BUILDKIT_INLINE_CACHE=1 \
        --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
        --build-arg VCS_REF=${CI_COMMIT_SHA} \
        --build-arg VERSION=${CI_COMMIT_TAG:-${CI_COMMIT_SHORT_SHA}} \
        --build-arg BUILD_TYPE=${BUILD_TYPE} \
        --label "org.opencontainers.image.source=${CI_PROJECT_URL}" \
        --label "org.opencontainers.image.revision=${CI_COMMIT_SHA}" \
        --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
        --label "org.opencontainers.image.title=${CI_PROJECT_NAME}" \
        --label "org.opencontainers.image.description=Secure DevSecOps application" \
        --label "security.scan.passed=true" \
        --tag ${IMAGE_NAME}:${BUILD_TAG}-${PLATFORM_SAFE}-${BUILD_TYPE} \
        --push \
        .
    - rm -rf ${BUILDX_CACHE_DIR} && mv ${BUILDX_CACHE_DIR}-new ${BUILDX_CACHE_DIR}
    - echo "IMAGE_TAG_${PLATFORM_SAFE}_${BUILD_TYPE}=${BUILD_TAG}-${PLATFORM_SAFE}-${BUILD_TYPE}" >> build.env
  artifacts:
    reports:
      dotenv: build.env
    expire_in: 1 day
  retry:
    max: 2
    when: runner_system_failure

# Multi-platform manifest creation
build-manifest:
  stage: üèóÔ∏è build-matrix
  image: docker:24-dind
  services:
    - docker:24-dind
  needs:
    - job: build-matrix
      artifacts: true
  script:
    - echo "üì¶ Creating multi-platform manifest"
    - docker buildx imagetools create \
        --tag ${IMAGE_NAME}:${BUILD_TAG} \
        --tag ${IMAGE_NAME}:latest \
        ${IMAGE_NAME}:${BUILD_TAG}-linux-amd64-standard \
        ${IMAGE_NAME}:${BUILD_TAG}-linux-arm64-v8-standard
    - echo "üîê Creating hardened manifest"
    - docker buildx imagetools create \
        --tag ${IMAGE_NAME}:${BUILD_TAG}-hardened \
        --tag ${IMAGE_NAME}:latest-hardened \
        ${IMAGE_NAME}:${BUILD_TAG}-linux-amd64-hardened \
        ${IMAGE_NAME}:${BUILD_TAG}-linux-arm64-v8-hardened
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

# ==============================================================================
# üß™ PARALLEL TEST EXECUTION
# ==============================================================================

# Comprehensive test matrix
test-matrix:
  stage: üß™ test-parallel
  image: node:18-alpine
  parallel:
    matrix:
      - TEST_TYPE: [unit, integration, e2e, security, performance]
      - NODE_VERSION: ["18", "20"]
  coverage: '/Statements\s*:\s*([^%]+)/'
  cache:
    key: "test-${TEST_TYPE}-${NODE_VERSION}-${CI_COMMIT_REF_SLUG}"
    paths:
      - node_modules/
      - .nyc_output/
      - .jest-cache/
  script:
    - echo "üß™ Running ${TEST_TYPE} tests on Node ${NODE_VERSION}"
    - npm ci --cache .npm --prefer-offline
    - |
      case $TEST_TYPE in
        unit)
          npm run test:unit -- --coverage --ci --maxWorkers=2 \
            --testResultsProcessor=jest-junit \
            --coverageReporters=cobertura,lcov,text
          ;;
        integration)
          npm run test:integration -- --ci --maxWorkers=1
          ;;
        e2e)
          npm run test:e2e -- --ci --browser=chrome
          ;;
        security)
          npm run test:security -- --ci
          npm audit --audit-level=moderate
          ;;
        performance)
          npm run test:performance -- --ci
          ;;
      esac
  artifacts:
    when: always
    reports:
      junit: reports/junit-${TEST_TYPE}-${NODE_VERSION}.xml
      coverage_report:
        coverage_format: cobertura
        path: reports/cobertura-coverage-${TEST_TYPE}-${NODE_VERSION}.xml
    paths:
      - coverage/
      - reports/
      - performance-reports/
    expire_in: 7 days
  allow_failure: 
    - TEST_TYPE: performance

# Container security testing
container-security-test:
  stage: üß™ test-parallel
  image: aquasec/trivy:${TRIVY_VERSION}
  parallel:
    matrix:
      - SCAN_TYPE: [filesystem, image, config]
  needs:
    - job: build-matrix
      artifacts: true
  script:
    - echo "üîç Container security scan: ${SCAN_TYPE}"
    - |
      case $SCAN_TYPE in
        filesystem)
          trivy fs --format json --output security-reports/trivy-fs.json .
          ;;
        image)
          trivy image --format json --output security-reports/trivy-image.json \
            ${IMAGE_NAME}:${BUILD_TAG}
          ;;
        config)
          trivy config --format json --output security-reports/trivy-config.json .
          ;;
      esac
  artifacts:
    reports:
      container_scanning: security-reports/trivy-${SCAN_TYPE}.json
    paths:
      - security-reports/
    expire_in: 30 days
  allow_failure: true